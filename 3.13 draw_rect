/*
 * 	startup.c
 *
 */
 

__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void )
{
__asm__ volatile(" LDR R0,=0x2001C000\n");		/* set stack */
__asm__ volatile(" MOV SP,R0\n");
__asm__ volatile(" BL main\n");					/* call main */
__asm__ volatile(".L1: B .L1\n");				/* never return */

#define STK_CTRL ((volatile unsigned int *) (0xE000E010)) 
#define STK_LOAD ((volatile unsigned int *) (0xE000E014)) 
#define STK_VAL ((volatile unsigned int *) (0xE000E018)) 
}

int abs(int value) {
	if(value < 0) {
		return value*(-1);
	}
	return value;
}


typedef struct {
	char x; 
	char y;
} POINT, *PPOINT;

typedef struct {
	POINT p0; 
	POINT p1;
} LINE, *PLINE;

typedef struct {
	POINT p0;
	int x, y;
} RECT, *PRECT;

// List of lines to be displayed:
RECT rectangles[]={
	{10, 10, 20, 10},
	{25, 25, 10, 20},
	{40, 30, 70, 20},
	{60, 35, 10, 10},
	{70, 10, 5, 5}
};

__attribute__((naked))
void graphic_initialize(void) {
	__asm volatile (".HWORD 0xDFF0\n");
	__asm volatile ("BX LR\n");
}

__attribute__((naked))
void graphic_clear_screen(void) {
	__asm volatile (".HWORD 0xDFF1\n");
	__asm volatile ("BX LR\n");
}

__attribute__((naked))
void graphic_pixel_set(int x, int y) {
	__asm volatile (".HWORD 0xDFF2\n");
	__asm volatile ("BX LR\n");
}

__attribute__((naked))
void graphic_pixel_clear(int x, int y) {
	__asm volatile (".HWORD 0xDFF3\n");
	__asm volatile ("BX LR\n");
}

void delay_250ns( void ) {
	*STK_CTRL = 0;
	*STK_LOAD = ((168/4) - 1);
	*STK_VAL = 0;
	*STK_CTRL = 5;
	while((*STK_CTRL & 0x10000) == 0);
	*STK_CTRL = 0; 
}

void delay_mikro( unsigned int us ) {
	
	#define SIMULATOR
	// Compensating for slow simulation by div. with 1000 NOT ANYMORE
	while(us > 0) {
		delay_250ns();
		delay_250ns();
		delay_250ns();
		delay_250ns();
		us--;
	}
}


void delay_milli( unsigned int ms ) { 
	unsigned int ms_to_us = ms+10; // Borde vara *? //HELP
	delay_mikro((ms_to_us));
}
	// if massa saker return 1 (fortsätt med line) eller 0 ... gör ingenting
int draw_line(PLINE l) {
	
	POINT p0 = l -> p0;
	POINT p1 = l -> p1;
	int x0 = p0.x;
	int y0 = p0.y;
	int x1 = p1.x;
	int y1 = p1.y;
	
	if(x0 < 128 && x1 < 128 && y0 < 64 && y1 < 64) { 
		bresenhams_algorithm(x0, x1, y0, y1); 
		return 1;
	}
	return 0;
}

int draw_rect( PRECT r ) {
	POINT p0 = r -> p0;
	
	// Origo values:
	int px = p0.x;
	int py = p0.y;
	
	// Vectors:
	int x = r -> x;
	int y = r -> y;

	// Define points:
	POINT start1 = {px, py};     POINT end1 = {px+x, py};
	POINT start2 = {px+x, py};   POINT end2 = {px+x, py+y};
	POINT start3 = {px+x, py+y}; POINT end3 = {px, py+y};
	POINT start4 = {px, py+y};   POINT end4 = {px, py};
	
	// Define lines:             
	LINE l1 = {start1, end1};    
	LINE l2 = {start2, end2};	 
	LINE l3 = {start3, end3};	 
	LINE l4 = {start4, end4};

	// C is weird so I need to do this:
	PLINE pl1 = &l1;
	PLINE pl2 = &l2;
	PLINE pl3 = &l3;
	PLINE pl4 = &l4;
	
	// Draw lines:
	draw_line(pl1);
	draw_line(pl2);
	draw_line(pl3);
	draw_line(pl4);
}

void bresenhams_algorithm(x0, x1, y0, y1) {
	int steep;
	int ystep;
	int temp_var;
	int error;
	int deltax;
	int deltay;
	int y;
	
	if( abs(y1-y0) > abs(x1-x0) ) { steep = 1; } else { steep = 0; }
	
	if(steep) {
		//swap x0 <-> y0
		temp_var = x0;
		x0 = y0;
		y0 = temp_var;
		
		//swap x1 <-> y1
		temp_var = x1;
		x1 = y1;
		y1 = temp_var;
	}
	
	if(x0 > x1) {
		// swap x0 <-> x1
		temp_var = x0;
		x0 = x1;
		x1 = temp_var;
		
		// swap y0 <-> y1
		temp_var = y0;
		y0 = y1;
		y1 = temp_var;
	}
	
	deltax = x1 - x0;
	deltay = abs(y1 - y0);
	error = 0;
	y = y0;
	
	if(y0 < y1) { ystep = 1; } else { ystep = -1; }
	
	for(int x = x0; x <= x1; x++) {
		if( steep ) { graphic_pixel_set(y, x); } else { graphic_pixel_set(x, y); }
		error += deltay;
		if( 2*error >= deltax ) {
			y += ystep; 
			error -= deltax;
		} 
	}
}

void main(void) {
	graphic_initialize();
	graphic_clear_screen();
	while(1) {
		for( int i = 0; i < sizeof(rectangles) / sizeof( RECT ); i++) {
			draw_rect( &rectangles[i] );
			delay_milli( 50 );
		}
		graphic_clear_screen();
	}
	
	
}

