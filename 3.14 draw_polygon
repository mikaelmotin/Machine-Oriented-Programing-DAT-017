/*
 * 	startup.c
 *
 */
 
__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void )
{
__asm__ volatile(" LDR R0,=0x2001C000\n");		/* set stack */
__asm__ volatile(" MOV SP,R0\n");
__asm__ volatile(" BL main\n");					/* call main */
__asm__ volatile(".L1: B .L1\n");				/* never return */

#define STK_CTRL ((volatile unsigned int *) (0xE000E010)) 
#define STK_LOAD ((volatile unsigned int *) (0xE000E014)) 
#define STK_VAL ((volatile unsigned int *) (0xE000E018)) 
}

int abs(int value) {
	if(value < 0) {
		return value*(-1);
	}
	return value;
}


typedef struct {
	char x; 
	char y;
} POINT, *PPOINT;

typedef struct {
	POINT p0; 
	POINT p1;
} LINE, *PLINE;

typedef struct {
	char x,y;
	struct polygonpoint *next;
} POLYPOINT, *PPOLYPOINT;

// List of lines to be displayed:
LINE lines[]={
	{40, 10, 100, 10},
	{40, 10, 100, 20},
	{40, 10, 100, 30},
	{40, 10, 100, 40},
	{40, 10, 100, 50},
	{40, 10, 100, 60},
	{40, 10, 90, 60},
	{40, 10, 80, 60},
	{40, 10, 70, 60},
	{40, 10, 60, 60},
	{40, 10, 50, 60},
	{40, 10, 40, 60}
};

POLYPOINT pg8 = {20, 20, 0};
POLYPOINT pg7 = {20, 55, &pg8};
POLYPOINT pg6 = {70, 60, &pg7};
POLYPOINT pg5 = {80, 35, &pg6};
POLYPOINT pg4 = {100, 25, &pg5};
POLYPOINT pg3 = {90, 10, &pg4};
POLYPOINT pg2 = {40, 10, &pg3};
POLYPOINT pg1 = {20, 20, &pg2};

__attribute__((naked))
void graphic_initialize(void) {
	__asm volatile (".HWORD 0xDFF0\n");
	__asm volatile ("BX LR\n");
}

__attribute__((naked))
void graphic_clear_screen(void) {
	__asm volatile (".HWORD 0xDFF1\n");
	__asm volatile ("BX LR\n");
}

__attribute__((naked))
void graphic_pixel_set(int x, int y) {
	__asm volatile (".HWORD 0xDFF2\n");
	__asm volatile ("BX LR\n");
}

__attribute__((naked))
void graphic_pixel_clear(int x, int y) {
	__asm volatile (".HWORD 0xDFF3\n");
	__asm volatile ("BX LR\n");
}

void delay_250ns( void ) {
	*STK_CTRL = 0;
	*STK_LOAD = ((168/4) - 1);
	*STK_VAL = 0;
	*STK_CTRL = 5;
	while((*STK_CTRL & 0x10000) == 0);
	*STK_CTRL = 0; 
}

void delay_mikro( unsigned int us ) {
	
	#define SIMULATOR
	// Compensating for slow simulation by div. with 1000 NOT ANYMORE
	while(us > 0) {
		delay_250ns();
		delay_250ns();
		delay_250ns();
		delay_250ns();
		us--;
	}
}


void delay_milli( unsigned int ms ) { 
	unsigned int ms_to_us = ms+10; // Borde vara *? //HELP
	delay_mikro((ms_to_us));
}
	// if massa saker return 1 (fortsätt med line) eller 0 ... gör ingenting
int draw_line(PLINE l) {
	
	POINT p0 = l -> p0;
	POINT p1 = l -> p1;
	int x0 = p0.x;
	int y0 = p0.y;
	int x1 = p1.x;
	int y1 = p1.y;
	
	if(x0 < 128 && x1 < 128 && y0 < 64 && y1 < 64) { 
		bresenhams_algorithm(x0, x1, y0, y1); 
		return 1;
	}
	return 0;
}

void bresenhams_algorithm(x0, x1, y0, y1) {
	int steep;
	int ystep;
	int temp_var;
	int error;
	int deltax;
	int deltay;
	int y;
	
	if( abs(y1-y0) > abs(x1-x0) ) { steep = 1; } else { steep = 0; }
	
	if(steep) {
		//swap x0 <-> y0
		temp_var = x0;
		x0 = y0;
		y0 = temp_var;
		
		//swap x1 <-> y1
		temp_var = x1;
		x1 = y1;
		y1 = temp_var;
	}
	
	if(x0 > x1) {
		// swap x0 <-> x1
		temp_var = x0;
		x0 = x1;
		x1 = temp_var;
		
		// swap y0 <-> y1
		temp_var = y0;
		y0 = y1;
		y1 = temp_var;
	}
	
	deltax = x1 - x0;
	deltay = abs(y1 - y0);
	error = 0;
	y = y0;
	
	if(y0 < y1) { ystep = 1; } else { ystep = -1; }
	
	for(int x = x0; x <= x1; x++) {
		if( steep ) { graphic_pixel_set(y, x); } else { graphic_pixel_set(x, y); }
		error += deltay;
		if( 2*error >= deltax ) {
			y += ystep; 
			error -= deltax;
		} 
	}
}

int draw_polygon( PPOLYPOINT p ) {
	int px = p -> x;
	int py = p -> y; 
	POLYPOINT* ptr = p -> next;
	
	int px1 = ptr -> x;
	int py1 = ptr -> y;
	
	while(ptr != 0) {
		px1 = ptr -> x;
		py1 = ptr -> y;
		
		POINT p0 = {px, py};
		POINT p1 = {px1, py1};
		
		LINE line = {p0, p1};
		PLINE le_line = &line;
		draw_line(le_line);
		
		

		px = px1;
		py = py1;
		ptr = ptr->next;
	}
}


void main(void) {
	graphic_initialize();
	graphic_clear_screen();
	while(1) {
		draw_polygon( &pg1 );
		delay_milli(50);
		graphic_clear_screen();
	}
}

