/*
 * 	startup.c
 *
 */
#include "Upg4.3.h"
__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void )
{
__asm__ volatile(" LDR R0,=0x2001C000\n");		/* set stack */
__asm__ volatile(" MOV SP,R0\n");
__asm__ volatile(" BL main\n");					/* call main */
__asm__ volatile(".L1: B .L1\n");				/* never return */

#define STK_CTRL ((volatile unsigned int *) (0xE000E010)) 
#define STK_LOAD ((volatile unsigned int *) (0xE000E014)) 
#define STK_VAL ((volatile unsigned int *) (0xE000E018)) 
#define SCB_VEKTOR ((volatile unsigned int *) (0xE000ED08)) 

/* GLOBAL REGISTER VALUES - don't use ; with defines */
#define GPIO_MODER ((volatile unsigned int *) (0x40020C00))
#define GPIO_OTYPER ((volatile unsigned short *) (0x40020C04))
#define GPIO_PUPDR ((volatile unsigned int *) (0x40020C0C))
#define GPIO_IDR_LOW ((volatile unsigned char *) (0x40020C10))
#define GPIO_IDR_HIGH ((volatile unsigned char *) (0x40020C11))
#define GPIO_ODR_LOW ((volatile unsigned char *) (0x40020C14))
#define GPIO_ODR_HIGH ((volatile unsigned char *) (0x40020C15))
#ifdef SIMULATOR
#define DELAY_COUNT 100
#else
#define DELAY_COUNT 1000000
#endif
}

__attribute__( (naked) ) void enable_interrupt( void ) {
	__asm volatile ( "CPSIE I\n");
	__asm volatile ( "BX LR\n" );
}

static volatile int systick_flag;
static volatile int delay_count;


void systick_irq_handler( void ) {
	*STK_CTRL = 0;
	delay_count -= 1;
	if( delay_count > 0) { delay_1mikro(); } else { systick_flag = 1; }
}

void init_app( void ) {
	enable_interrupt();
	//*SCB_VEKTOR = 0x2001C000;
	// Initiera D-port
	*GPIO_MODER = 0x00005555;	
	
	// Vector Offset Systick: 0xE000ED08, där vectoroffset = 0x0000003C
	*((void(**)(void) ) (SCB_VEKTOR)) = systick_irq_handler;
}

void delay_1mikro() {
	systick_flag = 0;
	*STK_CTRL = 0;
	*STK_LOAD = (168 - 1);
	*STK_VAL = 0;
	*STK_CTRL = 7;	
}

void delay( unsigned int count ) {
	if(count == 0) return;
	delay_count = count;
	systick_flag = 0;
	delay_1mikro();
}

void main(void){
	init_app();
	*GPIO_ODR_LOW = 0;
	delay( DELAY_COUNT );
	*GPIO_ODR_LOW = 0xFF;
	while(1) {
		if( systick_flag ) { break; }
		// Här kan kod köras under väntetiden
	}
	*GPIO_ODR_LOW = 0;
}
	
