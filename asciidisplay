/*
 * 	startup.c
 *
 */
 
 #include "startup.h"
__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void )
{
__asm__ volatile(" LDR R0,=0x2001C000\n");		/* set stack */
__asm__ volatile(" MOV SP,R0\n");
__asm__ volatile(" BL main\n");					/* call main */
__asm__ volatile(".L1: B .L1\n");				/* never return */

/* Konstanter för portar */
//#define E_MODER ((volatile unsigned int *) (0x40021000))
//#define Bargraph ((volatile unsigned char *) (0x40021014)) 
#define STK_CTRL ((volatile unsigned int *) (0xE000E010)) 
#define STK_LOAD ((volatile unsigned int *) (0xE000E014)) 
#define STK_VAL ((volatile unsigned int *) (0xE000E018)) 

#define PORT_BASE 0x40021000
#define portModer ((volatile unsigned int *) (PORT_BASE))
#define portOtyper ((volatile unsigned short *) (PORT_BASE+0x4))
#define portOspeedr ((volatile unsigned int *) (PORT_BASE+0x8))  
#define portPupdr ((volatile unsigned int *) (PORT_BASE+0xC))

#define portIDRLow ((volatile unsigned char *) (PORT_BASE+0x10))
#define portIDRHigh ((volatile unsigned char *) (PORT_BASE+0x10+1))
#define portODRLow ((volatile unsigned char *) (PORT_BASE+0x14))
#define portODRHigh ((volatile unsigned char *) (PORT_BASE+0x14+1))

#define B_E 0x40
#define B_SELECT 4
#define B_RW 2
#define B_RS 1
}

void init_app( void ) {
	*portModer = 0x55555555;
}

char ascii_read_controller( void ) {
	char rv;
	
	ascii_ctrl_bit_set( B_E );
	delay_mikro(2);
	
	rv = *portIDRHigh;  
	ascii_ctrl_bit_clear( B_E );
	return rv;
}

char ascii_read_status( void ) {
	
	*portModer = 0x00005555;
	ascii_ctrl_bit_clear( B_RS );
	ascii_ctrl_bit_set( B_RW );
	char rv = ascii_read_controller(); 
	
	*portModer = 0x55555555;
	return rv;
} 

void ascii_gotoxy(int x, int y) {
	unsigned char address;
	
	if(y != 1) {
		address = 0x40 | x -1;;
		
	} else {
		address = x -1;
	}
	ascii_write_cmd(0x80 | address);
	
}

void ascii_write_char( unsigned char c ) {
	while( (ascii_read_status() & 0x80) == 0x80 ) {}
	delay_mikro(8);
	ascii_write_data( c );
	delay_mikro(50);
}

void delay_250ns( void ) {
	*STK_CTRL = 0;
	*STK_LOAD = ((168/4) - 1);
	*STK_VAL = 0;
	*STK_CTRL = 5;
	while((*STK_CTRL & 0x10000) == 0);
	*STK_CTRL = 0; 
}

void delay_mikro( unsigned int us ) {
	// Compensating for slow simulation by div. with 1000 NOT ANYMORE
	while(us > 0) {
		delay_250ns();
		delay_250ns();
		delay_250ns();
		delay_250ns();
		us--;
	}
}


void delay_milli( unsigned int ms ) { 
	unsigned int ms_to_us = ms+10; // Borde vara *? //HELP
	delay_mikro((ms_to_us));
}

void ascii_ctrl_bit_clear( char x ) {
	char c = *portODRLow;
	c = c & ~x;
	*portODRLow = B_SELECT | c;
}

void ascii_ctrl_bit_set( unsigned char x ) {
	char c = *portODRLow;
	*portODRLow = B_SELECT | x | c;
}

void ascii_write_controller( unsigned char command) {
	ascii_ctrl_bit_set( B_E );
	*portIDRHigh = command;
	ascii_ctrl_bit_clear( B_E );
	delay_250ns();
}

void ascii_write_cmd( unsigned char command ) {
	ascii_ctrl_bit_clear( B_RS );
	ascii_ctrl_bit_clear( B_RW );
	
	ascii_write_controller(command);
}

void ascii_write_data( unsigned char data ) {
	ascii_ctrl_bit_clear( B_RW );
	ascii_ctrl_bit_set( B_RS );
	
	
	ascii_write_controller(data);
}

char ascii_read_data( void ) {
	char rv;
	
	*portModer = 0x00005555;
	ascii_ctrl_bit_set( B_RS );
	ascii_ctrl_bit_set( B_RW );
	rv = ascii_read_controller();
	
	*portModer = 0x55555555;
	return rv;
	
}

void ascii_init( void ) {
	// -- Struktur --
	// Vänta tills statusflaggan är 0
	// Fördröj 8 us
	// write_cmd
	// Fördröj med specifik fördröjning
	
	// Function Set:
	while( (ascii_read_status() & 0x80) == 0x80 ) {}
	delay_mikro(8);
	ascii_write_cmd(0x38); 
	delay_mikro(50);
	
	// Display Control:
	while( (ascii_read_status() & 0x80) == 0x80 ) {}
	delay_mikro(8);
	ascii_write_cmd(0x0C);
	delay_milli(2);
	
	// Clear Display:
	while( (ascii_read_status() & 0x80) == 0x80 ) {}
	delay_mikro(8);
	ascii_write_cmd(1);
	delay_milli(2); 
	
	// Entry Mode Set:
	while( (ascii_read_status() & 0x80) == 0x80 ) {}
	delay_mikro(8);
	ascii_write_cmd(6);
	delay_mikro(50);
}

int main(void)
{
	char *s;
	char test1[] = "Alfanumerisk";
	char test2[] = "Display - test";
	
	init_app();
	ascii_init();
	ascii_gotoxy(1, 1);
	s = test1;
	while( *s  ) {
		ascii_write_char( *s++ );
	}
	
	ascii_gotoxy(1, 2);
	s = test2;
	while( *s ) {
		ascii_write_char( *s++ );
	}
	return 0;
}




